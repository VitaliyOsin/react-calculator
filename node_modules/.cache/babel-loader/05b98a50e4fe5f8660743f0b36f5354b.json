{"ast":null,"code":"var _jsxFileName = \"/home/vitaliyosin/pr/ReactJunior/react-calculator/src/components/operators.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Operators = ({\n  inputHandler,\n  input,\n  signFlag\n}) => {\n  const operatorsSigns = [\"+\", \"-\", \"*\", \"/\"];\n\n  const onOpBtn = e => {\n    const {\n      target\n    } = e;\n\n    if (signFlag) {\n      inputHandler(input + target.textContent);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"operators\",\n    children: operatorsSigns.map(op => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: onOpBtn,\n      children: op\n    }, op, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Operators;\nexport default Operators;\n\nvar _c;\n\n$RefreshReg$(_c, \"Operators\");","map":{"version":3,"sources":["/home/vitaliyosin/pr/ReactJunior/react-calculator/src/components/operators.jsx"],"names":["React","Operators","inputHandler","input","signFlag","operatorsSigns","onOpBtn","e","target","textContent","map","op"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC;AACvD,QAAMC,cAAc,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAvB;;AACA,QAAMC,OAAO,GAAIC,CAAD,IAAO;AACrB,UAAM;AAAEC,MAAAA;AAAF,QAAaD,CAAnB;;AACA,QAAIH,QAAJ,EAAc;AACZF,MAAAA,YAAY,CAACC,KAAK,GAAGK,MAAM,CAACC,WAAhB,CAAZ;AACD;AACF,GALD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGJ,cAAc,CAACK,GAAf,CAAoBC,EAAD,iBAClB;AAAc,MAAA,OAAO,EAAEL,OAAvB;AAAA,gBACGK;AADH,OAAUA,EAAV;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjBD;;KAAMV,S;AAmBN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\n\nconst Operators = ({ inputHandler, input, signFlag }) => {\n  const operatorsSigns = [\"+\", \"-\", \"*\", \"/\"];\n  const onOpBtn = (e) => {\n    const { target } = e;\n    if (signFlag) {\n      inputHandler(input + target.textContent);\n    }\n  };\n  return (\n    <div className=\"operators\">\n      {operatorsSigns.map((op) => (\n        <div key={op} onClick={onOpBtn}>\n          {op}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Operators;\n"]},"metadata":{},"sourceType":"module"}